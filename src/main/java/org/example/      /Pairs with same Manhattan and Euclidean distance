Pairs with same Manhattan and Euclidean distance

 Problem statement

You are given a cartesian plane, having ‘N’ points in the form of the array ‘PointX’ and ‘PointY’ where ‘PointX[i]’ and ‘PointY[i]’ represent the ‘X’ coordinates and ‘Y’ coordinates of the i’th point, respectively. You have to find the number of pairs satisfying the following conditions:

1. The points in the pair are distinct.
2. Euclidean distance and the Manhattan distance between the points of the pair should be equal.

Note :

1. Pair (‘P’, ‘Q’) is the same as pair (‘Q’, ‘P’).
2. Euclidean distance is given by: (( ‘X2’ - ‘X1’) ^ 2 + (‘Y2’ - ‘Y1’) ^ 2) ^ 0.5.
3. Manhattan distance is given by: |’X2’ - ‘X1’| + |’Y2’ - ‘Y1’|, where points are (‘X1’, ‘Y1’) and (‘X2’, ‘Y2’).

For example :

Let points be: (1, 2), (2, 3), (1, 3)
The Euclidean distance between points (1, 2) and (1, 3) is: 1
The Manhattan distance between points (1, 2) and (1, 3) is: 1
The Euclidean distance between points (2, 3) and (1, 3) is: 1
The Manhattan distance between points (2, 3) and (1, 3) is: 1
So the pairs can be: [(1, 2), (1, 3)] and [(2, 3), (1, 3)].
So the number of pairs is 2.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :

1 <= T <= 10
1 <= N <= 10^5
-10^9 <= PointX[i], PointY[i] <= 10^9

Time Limit: 1 sec

Sample Input 1 :

2
2
1 7
1 5
3
1 2 1
2 3 3

Sample Output 1 :

0
2

Explanation For Sample Input 1 :

For test case 1: 
The Euclidean distance between points (1, 1) and (7, 5) is: 10
The Manhattan distance between points (1, 1) and (7, 5) is: 2
Both the distances are not the same, so the number of pairs is 0.

For test case 2: 
The Euclidean distance between points (1, 2) and (1, 3) is: 1
The Manhattan distance between points (1, 2) and (1, 3) is: 1
The Euclidean distance between points (2, 3) and (1, 3) is: 1
The Manhattan distance between points (2, 3) and (1, 3) is: 1
So the pairs can be: [(1, 2), (1, 3)] and [(2, 3), (1, 3)].
So the number of pairs is 2.

Sample Input 2 :

2
3 
1 1 3
1 3 3
2
1 1
2 3

Sample Output 2 :

2
1

\

import java.util.* ;
import java.io.*; 
 

public class Solution {

	public static int count(int[] pointX, int[] pointY, int n) {
	 	// Write your code here
	int[][]arr = new int[n][2];
	for(int i =0; i<n; i++){
		arr[i][0] = pointX[i];
		arr[i][1] = pointY[i];
	}
		 Map<Integer, Integer> X = new HashMap<Integer, Integer>();

    // To store Frequency of all distinct Yi
    Map<Integer, Integer> Y = new HashMap<Integer, Integer>();

    // To store Frequency of all distinct
    // points (Xi, Yi);
    Map<List<Integer>, Integer> XY = new HashMap<List<Integer>, Integer>();

    for (int i = 0; i < n; i++) {
      int xi = arr[i][0];
      int yi = arr[i][1];

      // Hash xi coordinate
      if (!X.containsKey(xi))
        X.put(xi, 0);
      X.put(xi, X.get(xi) + 1);

      // Hash yi coordinate
      if (!Y.containsKey(yi))
        Y.put(yi, 0);
      Y.put(yi, Y.get(yi) + 1);

      // Hash the point (xi, yi)
      if (!XY.containsKey(Arrays.asList(xi, yi)))
        XY.put(Arrays.asList(xi, yi), 0);
      XY.put( Arrays.asList(xi, yi), XY.get(Arrays.asList(xi, yi)) + 1);
    }

    int xAns = 0, yAns = 0, xyAns = 0;

    // find pairs with same Xi
    for (Map.Entry<Integer, Integer> xCoordinatePair : X.entrySet())
    {
      int xFrequency = xCoordinatePair.getValue();
      int sameXPairs
        = (xFrequency * (xFrequency - 1)) / 2;
      xAns += sameXPairs;
    }

    // find pairs with same Yi
    for (Map.Entry<Integer, Integer> yCoordinatePair : Y.entrySet()) {
      int yFrequency = yCoordinatePair.getValue();
      int sameYPairs
        = (yFrequency * (yFrequency - 1)) / 2;
      yAns += sameYPairs;
    }

    // find pairs with same (Xi, Yi)
    for (Map.Entry<List<Integer>, Integer> XYPair : XY.entrySet())
    {
      int xyFrequency = XYPair.getValue();

      // calculate ((xyFrequency) C2)
      int samePointPairs
        = (xyFrequency * (xyFrequency - 1)) / 2;
      xyAns += samePointPairs;
    }

    return (xAns + yAns - (2 * xyAns));
    /*    we are subtracting 2 * xyAns because we have counted
           let say A,B coinciding points two times in xAns and
           yAns which should not be add to the final answer so
           we are subtracting xyAns 2 times. */
	}

}
