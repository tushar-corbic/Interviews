1155. Number of Dice Rolls With Target Sum

Problem statement
You are given D dice, each having F faces numbered 1 to F, both inclusive. The task is to find the possible number of ways to roll the dice together such that the sum of face-up numbers equal the given target S.

Note :
As the answer can be large, return your answer modulo 10^9  + 7.
Follow Up :
Can you solve this using not more than O(S) extra space?
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 5    
1 <= D, F <= 50
1 <= S <= 10^3

Time limit: 1 sec
Sample input 1 :
3
2 5 10
1 6 9
2 6 8 
Sample output 1 :
1
0
5
Explanation of sample input 1 :
For test case 1 :  
We are given 2 dice with 5 faces numbered 1, 2, 3, 4 and 5.
The only possible way of getting a sum of 10 is when both the die face 5. Hence, the answer is 1.  

For test case 2 :
We are given 1 dice with 6 faces numbered 1, 2, 3, 4, 5 and 6.
There is no possible way of getting a sum of 9 with a single die having all the faces less than 9. Hence, the answer is 0. 

For test case 3 :
We are given 2 dice with 6 faces numbered 1, 2, 3, 4, 5 and 6.
The possible ways are [{2, 6}, {3, 5}, {4, 4}, {5, 3}, {6, 2}]. Hence, the answer is 5. 
Sample input 2 :
2
6 3 8  
2 2 3
Sample output 2 :
21
0

import java.util.*;
public class Solution {
    
    public static int diceThrows(int d, int f, int s) {
        // Write you code here
        int[][]dp = new int[d+1][s+1];
        for(int i =0; i<=d; i++){
            Arrays.fill(dp[i], -1);
        }
        return helper(d, f, s, dp);
    }
    static int helper(int d, int f, int s, int[][]dp){
        if(s<=0 || d==0){
            if(d==s)
                return 1;
            else
                return 0;
        }
        if(dp[d][s]!=-1)
            return  dp[d][s];
        int ans = 0;
        for(int i =1; i<=f; i++){
            ans = (ans + helper(d-1, f, s-i,dp))%1000000007;
        }
        return dp[d][s] = ans;
    }

}
