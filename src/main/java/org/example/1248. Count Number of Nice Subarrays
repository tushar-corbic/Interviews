Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
// number of subarrays is right-left+1 , for exact , find the atmost k and atmost k-1;
class Solution {
     int helper(int[]arr, int k){
        int left = 0;
        int right = 0;
        int n = arr.length;
        int ans = 0;
        int count = 0;
         HashMap<Integer, Integer> map = new HashMap<>();
        while(right<n){
            // map.put(arr[right], map.getOrDefault(arr[right],0)+1);
            if(arr[right]%2==1)
                count++;
            while(count>k){
                if(arr[left]%2==1)
                    count--;
                left++;
            }
            ans+=right-left+1;
            right++;
        }
        return ans;
    }
    public int numberOfSubarrays(int[] arr, int k) {
        return helper(arr, k)-helper(arr, k-1);
    }
}
