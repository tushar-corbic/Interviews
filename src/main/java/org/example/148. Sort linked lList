148. Sort linked lList
Given the head of a linked list, return the list after sorting it in ascending order.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        fast= slow.next;
        slow.next = null;
        head = sortList(head);
        fast= sortList(fast);
        return merge(head, fast);
    }
    ListNode merge(ListNode first, ListNode second){
        if(first==null && second==null)
            return null;
        if(first==null)
            return second;
        if(second==null)
            return first;
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        while(first!=null && second!=null){
            if(first.val<=second.val){
                cur.next = first;
                cur = cur.next;
                first= first.next;
            }else{
                cur.next = second;
                cur = cur.next;
                second= second.next;
            }
        }  
        if(second!=null){
            cur.next = second;
        }          
        if(first!=null){
            cur.next = first;
        }
        return dummy.next;
    }
}
