1679. Max Number of K-Sum Pairs

You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


class Solution {
    public int maxOperations(int[] arr, int k) {
        Arrays.sort(arr);
        int count =0;
        int i =0;
        int j = arr.length-1;
        while(i<j){
            if(arr[i]+arr[j]==k){
                count++;
                i++;
                j--;
            }else if(arr[i]+arr[j]>k){
                j--;
            }else{
                i++;
            }
        }
        return count++;
    }
}


    public int maxOperations(int[] nums, int k) {
        Map<Integer, Integer> map=new HashMap<>();
        int res=0;
        for(int i=0;i<nums.length;i++) {
            if(map.containsKey(k-nums[i])) {
                res++;
                if(map.get(k-nums[i])==1) map.remove(k-nums[i]);
                else map.put(k-nums[i], map.get(k-nums[i])-1);
            }
            else map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
        }
        return res;
    }
