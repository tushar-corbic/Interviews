Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

class Solution {
    private static final String[] KEYS = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
    
    public List<String> letterCombinations(String digits) {
        List<String> res= new ArrayList<>();
        if(digits==null || digits.length()==0)
            return res;
        helper(res, new StringBuilder(), 0, digits);
        return res;
    }
    public void helper(List<String> res, StringBuilder str, int index, String digits){
        if(index>=digits.length()){
            res.add(str.toString());
            return;
        }
        String li = KEYS[(digits.charAt(index)-'0')];
        for(int i=0; i<li.length(); i++){

            str.append(li.charAt(i));
            helper(res, str, index+1,digits);
            str.setLength(str.length()-1);
        }
    }
}
