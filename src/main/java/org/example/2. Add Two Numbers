2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(-1);
        ListNode head= dummy;

        if(l1==null)
            return l2;
        if(l2==null)
            return l1;
        int carry = 0;
        while(l1!=null || l2!=null){
            int val1 = l1!=null ? l1.val:0;
            int val2 = l2!=null? l2.val : 0;
            int total = val1+val2+carry;
            carry = total/10;
            total = total%10;
            dummy.next = new ListNode(total);
            dummy = dummy.next;
            l1 = l1==null?l1: l1.next;
            l2 = l2==null?l2: l2.next;
        }
        if(carry!=0)
            dummy.next= new ListNode(carry);
        return head.next;
        // return head;
    }
}

