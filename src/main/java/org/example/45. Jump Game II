45. Jump Game II

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

class Solution {
    public int jump(int[] nums) {
        int i,n,j;
        n=nums.length;
        int [] pre = new int[n];
        for(i=0;i<n;i++)
        {
            // Initialize all the index position with some max value to denote it is unreachable
            pre[i] = Integer.MAX_VALUE;
        }
        
        // Make the first position value as 0 as it is the default place where we start
        pre[0] = 0;
		// Main condition check goes here.
        for(i=0;i<n;i++)
        {
            for(j=i;j<=i+nums[i] && j<n;j++)
            {
                pre[j] = Math.min(pre[j], pre[i]+1);
            }
        }
        return pre[n-1];
    }
}



class Solution {
    public int jump(int[] arr) {
        int l = 0;
        int r = 0;
        int jump= 0;
        int n = arr.length;
        while(r<n-1){
            int farthest = 0;
            for(int i = l; i<=r; i++){
                farthest = Math.max(farthest, arr[i]+i);
            }
            l = r+1;
            r = farthest;
            jump++;
        }
        return jump;
    }
}

