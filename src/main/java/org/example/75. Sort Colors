75. Sort Colors

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.


import java.util.*;
public class Solution
{
	public static void sortArray(ArrayList<Integer> arr, int n)
	{
		// Write Your Code Here.
		int low  = 0;
		int high =arr.size()-1;
		int mid = 0;
		while(mid<=high){
			if(arr.get(mid)==0){
				swap(arr, low, mid);
				low++;
				mid++;
			}else if(arr.get(mid)==1){
				mid++;
			}else{
				swap(arr, mid, high);
				high--;
			}
		}
	}
	static void swap(ArrayList<Integer>arr, int i, int j){
		int temp = arr.get(i);
		arr.set(i, arr.get(j));
		arr.set(j, temp);
	}
}
