76. Minimum Window Substring

Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.



class Solution {
    public String minWindow(String s, String t) {
        int[]map= new int[256];
        for(char a : t.toCharArray()){
            map[a-'A']++;
        }
        int count = 0;
        int mini = Integer.MAX_VALUE;
        int sindex = -1;
        int l = 0;
        int r = 0;
        while(r<s.length()){
            char ss =  s.charAt(r);
            if(map[s.charAt(r)-'A']>0) count++;
            map[ss-'A']--;

            while(count==t.length()){
                if(r-l+1<mini){
                    mini = r-l+1;
                    sindex = l;
                }
                map[s.charAt(l)-'A']++;
                if(map[s.charAt(l)-'A']>0) count--;
                l++;
            }
            r++;
        }
        if(sindex==-1)
            return "";
        return s.substring(sindex, sindex+mini);
    }
}
