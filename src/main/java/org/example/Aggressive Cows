Aggressive Cows
roblem statement
You are given an array 'arr' consisting of 'n' integers which denote the position of a stall.



You are also given an integer 'k' which denotes the number of aggressive cows.



You are given the task of assigning stalls to 'k' cows such that the minimum distance between any two of them is the maximum possible.



Print the maximum possible minimum distance.



import java.util.*;
public class Solution {
    public static int canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            // if (cntCows >= cows) return true;
        }
        // return false;
        return cntCows;
    }
    public static int aggressiveCows(int []stalls, int k) {
        //    Write your code here.
         int n = stalls.length; //size of array
        //sort the stalls[]:
        Arrays.sort(stalls);

        int low = 1, high = stalls[n - 1] - stalls[0];
        //apply binary search:
        while (low <= high) {
            int mid = (low + high) / 2;
            int cnt = canWePlace(stalls, mid, k);
            if(cnt>=k){
                low = mid+1;
            }else{
                high = mid-1;
            }
            // if (canWePlace(stalls, mid, k) == true) {
            //     low = mid + 1;
            // } else high = mid - 1;
        }
        
        return high;
    }
}
