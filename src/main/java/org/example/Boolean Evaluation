Problem statement
You are given an expression 'exp' in the form of a string where operands will be : (TRUE or FALSE), and operators will be : (AND, OR or XOR).



Now you have to find the number of ways we can parenthesize the expression such that it will evaluate to TRUE.



As the answer can be very large, return the output modulo 1000000007.



Note :

‘T’ will represent the operand TRUE.
‘F’ will represent the operand FALSE.
‘|’ will represent the operator OR.
‘&’ will represent the operator AND.
‘^’ will represent the operator XOR.

public class Solution {
    static int mod = 1000000007;
    public static int evaluateExp(String exp) {
        // Write your code here.
        int n = exp.length();
        int[][][]dp =new int [n][n][2];
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                for(int k =0; k<2; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return helper(exp, 0, n-1, 1, dp);
        
    }
    static int helper(String str, int i, int j, int isTrue, int[][][]dp){
        if(i>j)
            return 0;
        if(i==j){
            if(isTrue==1){
                return str.charAt(i)=='T'? 1 : 0;
            }else{
                return str.charAt(i)=='F'? 1: 0;
            }
        }
        if(dp[i][j][isTrue]!=-1)
            return dp[i][j][isTrue];
        int ans = 0;
        for(int k = i+1; k<j; k+=2){
            int lt = dp[i][k-1][1]==-1 ? helper(str, i,k-1, 1, dp): dp[i][k-1][1];
            int lf = dp[i][k-1][0]==-1 ? helper(str, i, k-1, 0, dp): dp[i][k-1][0];
            int rt = dp[k+1][j][1]==-1 ? helper(str,k+1, j, 1, dp): dp[k+1][j][1];
            int rf = dp[k+1][j][0]==-1 ? helper(str, k+1, j, 0, dp): dp[k+1][j][0];

            char operator = str.charAt(k);
            if(operator=='&'){
                if(isTrue==1){
                    ans = (ans%mod + (lt*rt)%mod)%mod;
                }else{
                    ans =( ans%mod + ((lf*rf)%mod + (lt*rf)%mod + (lf*rt)%mod)%mod)%mod;
                }
            }else if(operator=='|'){
                if(isTrue==1){
                    ans = (ans%mod + ((lt*rt)%mod + (lt*rf)%mod + (lf*rt)%mod)%mod)%mod;
                }else{
                    ans = (ans%mod + (lf*rf)%mod)%mod;
                }
            }else if(operator=='^'){
                if(isTrue==1){
                    ans = (ans%mod + ((lf*rt)%mod + (lt*rf)%mod)%mod)%mod;
                }else{
                    ans = (ans%mod + ((lf*rf)%mod + (lt*rt)%mod)%mod)%mod;
                }
            }
        }
        return dp[i][j][isTrue] =ans;
    }
}
