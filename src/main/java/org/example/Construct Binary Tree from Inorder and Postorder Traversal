 Construct Binary Tree from Inorder and Postorder Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index = 0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
            Map<Integer,Integer>map = new HashMap<>();
        for(int i =0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }
        index = postorder.length-1;
        return helper(postorder, inorder, 0, inorder.length-1, map);
    }
    TreeNode helper(int[]preorder, int[]inorder,int instart, int inend, Map<Integer,Integer>map){
        if(instart>inend){
            return null;
        }
        TreeNode temp = new TreeNode(preorder[index--]);
        if(instart==inend)
            return temp;
        int tempindex = map.get(temp.val);
   
        temp.right =helper(preorder, inorder, tempindex+1, inend, map);
             temp.left = helper(preorder, inorder, instart, tempindex-1, map);
        return temp;
    }
}

