Count derangements 
 Problem statement

A Derangement is a permutation of ‘N’ elements, such that no element appears in its original position. For example, an instance of derangement of {0, 1, 2, 3} is {2, 3, 1, 0}, because 2 present at index 0 is not at its initial position which is 2 and similarly for other elements of the sequence.

Given a number ‘N’, find the total number of derangements possible of a set of 'N’ elements.
Note:

The answer could be very large, output answer %(10 ^ 9 + 7).

Let countDer(n) be count of derangements for n elements. Below is the recursive relation to it.  

countDer(n) = (n - 1) * [countDer(n - 1) + countDer(n - 2)]

How does above recursive relation work? 

There are n – 1 way for element 0 (this explains multiplication with n – 1). 
Let 0 be placed at index i. There are now two possibilities, depending on whether or not element i is placed at 0 in return. 

    i is placed at 0: This case is equivalent to solving the problem for n-2 elements as two elements have just swapped their positions.
    i is not placed at 0: This case is equivalent to solving the problem for n-1 elements as now there are n-1 elements, n-1 positions and every element has n-2 choices
public class Solution {
	public static long countDerangements(int n) {
		// Write your code here.
		long der[] = new long[n + 1];
     
        // Base cases
        der[1] = 0;
        der[2] = 1;
     
        // Fill der[0..n] in bottom up 
        // manner using above recursive
        // formula
        for (int i = 3; i <= n; i++)
            der[i] =((i - 1) * (der[i - 1] + der[i - 2]))%1000000007;
     
        // Return result for n
        return der[n];
	}
}
