
Problem statement
Given an array of size 'N' return the count array such that COUNT[i] equals the number of element which are smaller than ARR[ i ] on its the right side.

For Example : ARR = [4,2,1,5] the count array corresponding to the given array is :-.

The Number of elements smaller than 4 on its right side is 2.
The Number of elements smaller than 2 on its right side is 1.
The Number of elements smaller than 1 on its right side is 0.
The Number of elements smaller than 5 on its right side is 0.
Hence the count array is [2,1,0,0]
public class Solution {
    public static int[] countNumber(int n, int[] arr) {
        int[][] v = new int[n][2];
        for (int i = 0; i < n; i++) {
            v[i][0] = arr[i];
            v[i][1] = i;
        }
        int[] ans = new int[n];
        mergesort(v, ans, 0, n - 1);
        return ans;
    }
    static void merge(int[][] v, int[] ans, int l, int mid, int h)
    {
        int[][] t = new int[h - l + 1][2]; // temporary array for merging both halves
        int i = l;
        int j = mid + 1;
        int k = 0;
        while (i < mid + 1 && j <= h) {
            if (v[i][0] > v[j][0]) {
                ans[v[i][1]] += (h - j + 1);
                t[k][0] = v[i][0];
                t[k][1] = v[i][1];
                i++;
            }
            else {
                t[k][0] = v[j][0];
                t[k][1] = v[j][1];
                j++;
            }
            k++;
        }

        while (i <= mid) {
            t[k][0] = v[i][0];
            t[k][1] = v[i][1];
            k++;
            i++;
        }
        while (j <= h) {
            t[k][0] = v[j][0];
            t[k][1] = v[j][1];
            k++;
            j++;
        }
        k = 0;
        for (i = l; i <= h; i++, k++) {
            v[i][0] = t[k][0];
            v[i][1] = t[k][1];
        }
    }

    static void mergesort(int[][] v, int[] ans, int i, int j)
    {
        if (i < j) {
            int mid = (i + j) / 2;
            mergesort(v, ans, i, mid);
            mergesort(v, ans, mid + 1, j);
            merge(v, ans, i, mid, j);
        }
    }
}
