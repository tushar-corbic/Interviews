Diagonal sum in binary tree

Consider Red lines of slope -1 passing between nodes (in the following diagram). The diagonal sum in a binary tree is the sum of all node data lying between these lines. Given a Binary Tree of size n, print all diagonal sums.

For the following input tree, the output should be 9, 19, 42.
9 is the sum of 1, 3, and 5.
19 is the sum of 2, 6, 4, and 7.
42 is the sum of 9, 10, 11, and 12.



import java.util.* ;
import java.io.*; 
/*******************************************************

	Following is the BinaryTreeNode class structure
		
	class BinaryTreeNode < T > {
		T data;
		BinaryTreeNode < T > left;
		BinaryTreeNode < T > right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	
*******************************************************/

import java.util.ArrayList;

class pp{
	BinaryTreeNode<Integer>node;
	int level;
	public pp(BinaryTreeNode<Integer>node, int val){
		this.node = node;
		this.level = val;
	}
}
public class Solution {
	
	public static ArrayList < Long > diagonalSum(BinaryTreeNode < Integer > root) {
		// Write your code here.
		Map<Integer,Integer>ans = new HashMap<>();
		Queue<pp> que = new LinkedList<>();
		if(root==null)
			return new ArrayList<Long>();
		que.offer(new pp(root,0));
		while(!que.isEmpty()){
			pp temp = que.poll();
			BinaryTreeNode<Integer> node = temp.node;
			int level = temp.level;
			while(node!=null){
				ans.put(level, ans.getOrDefault(level,0)+node.data);
				if(node.left!=null){
					que.offer(new pp(node.left, level+1));
				}
				node = node.right;
			}
		}
		ArrayList<Long>res = new ArrayList<>();
		for(Integer val: ans.values()){
			res.add((long)val);
		}
		return res;
	}
}
