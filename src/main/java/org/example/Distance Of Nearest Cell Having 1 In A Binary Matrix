 Distance Of Nearest Cell Having 1 In A Binary Matrix 
 Problem statement

You have been given a binary matrix 'MAT' containing only 0’s and 1’s of size N x M. You need to find the distance of the nearest cell having 1 in the matrix for each cell.

The distance is calculated as |i1 – i2| + |j1 – j2|, where i1, j1 are the coordinates of the current cell and i2, j2 are the coordinates of the nearest cell having value 1.

Note :

You can only move in four directions which are : Up, Down, Left and Right.

For example :

If N = 3, M = 4

and mat[ ][ ] = { 0, 0, 0, 1,
                  0, 0, 1, 1,
                  0, 1, 1, 0 }

then the output matrix will be

3  2  1  0
2  1  0  0
1  0  0  1

Detailed explanation ( Input/output format, Notes, Images )
Constraints:

1 <= T <= 5
1 <= N <= 2*10^2
1 <= M <= 2*10^2

Where ‘T’ is the number of test cases, ‘N’ is the number of rows in the matrix and ‘M’ is the number of columns in the matrix.

Sample Input 1:

1
3 4
0 0 0 1
0 0 1 1
0 1 1 0

Sample Output 1:

3 2 1 0
2 1 0 0
1 0 0 1

Sample Input 2:

1
3 3
1 0 0 
0 0 1 
0 1 1

Sample Output 2:

0 1 1 
1 1 0 
1 0 0



import java.util.ArrayList;
import java.util.*;
class tuple{
	int first;
	int second;
	int third;
	public tuple(int a, int b, int c){
		this.first = a;
		this.second = b;
		this.third = c;
	}
}
public class Solution {
	public static ArrayList<ArrayList<Integer>> nearest(ArrayList<ArrayList<Integer>> mat, int n, int m) {
		// Write your code here.
		int[][]dist = new int[n][m];
		int[][]vis = new int[n][m];
		Queue<tuple> que = new LinkedList<>();
		for(int i =0; i<mat.size(); i++){
			for(int j=0;j<mat.get(i).size(); j++){
				if(mat.get(i).get(j)==1){
					que.offer(new tuple(i, j, 0));
					vis[i][j] = 1;
				}
			}
		}
		int[]dx = new int[]{1 ,0,-1,0};
		int[]dy = new int[]{0, 1, 0, -1};
		while(!que.isEmpty()){
			tuple temp = que.poll();
			dist[temp.first][temp.second] = temp.third;
			for(int k =0; k<4; k++){
				int xx = temp.first + dx[k];
				int yy = temp.second + dy[k];
				if(xx>=0 && xx<n && yy>=0 && yy<m && vis[xx][yy]==0 && mat.get(xx).get(yy)==0){
					vis[xx][yy] = 1;
					que.offer(new tuple(xx,yy, temp.third+1));
				}
			}
		}
		ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
		for(int i =0; i<n; i++){
			ans.add(new ArrayList<>());
			for(int j =0;j<m; j++){
				ans.get(i).add(dist[i][j]);
			}
		}
		return ans;
	}
}
