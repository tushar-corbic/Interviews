Flatten Binary Tree to Linked List

Problem statement
You are given a binary tree consisting of 'n' nodes.



Convert the given binary tree into a linked list where the linked list nodes follow the same order as the pre-order traversal of the given binary tree.



Use the right pointer of the binary tree as the “next” pointer for the linked list and set the left pointer to NULL.



Use these nodes only. Do not create extra nodes.



Example :
Input: Let the binary be as shown in the figure:



Step 1: Start with the current node as the root of the tree.

Step 2: While the current node is not null we traverse the tree in a while loop:

If the current node has a left child:
Find the rightmost node in the left subtree.
Connect the rightmost node of the left subtree to the current node’s right child.
Update the current node’s right child to be its left child.
Set the current node’s left child to null.
Move to the current node’s right child.
If the current node has no right child:
Move to the current node’s left child (if it exists) or null.
Step 3: Repeat until all nodes are processed.

                                
import java.util.*;

// TreeNode structure
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) {
        val = x;
        left = null;
        right = null;
    }
}

class Solution {
    // Function to flatten a binary tree
    // to a right next Linked List structure
    public void flatten(TreeNode root) {
        // Initialize a pointer
        // 'curr' to the root of the tree
        TreeNode curr = root;

        // Iterate until 'curr'
        // becomes NULL
        while (curr != null) {
            // Check if the current
            // node has a left child
            if (curr.left != null) {
                // If yes, find the rightmost
                // node in the left subtree
                TreeNode pre = curr.left;
                while (pre.right != null) {
                    pre = pre.right;
                }

                // Connect the rightmost node in
                // the left subtree to the current
                // node's right child
                pre.right = curr.right;

                // Move the entire left subtree to the
                // right child of the current node
                curr.right = curr.left;

                // Set the left child of
                // the current node to NULL
                curr.left = null;
            }

            // Move to the next node
            // on the right side
            curr = curr.right;
        }
    }
}

// Print the preorder traversal of the
// Original Binary Tree
class Main {
    public static void printPreorder(TreeNode root) {
        if (root == null) {
            return;
        }
        System.out.print(root.val + " ");
        printPreorder(root.left);
        printPreorder(root.right);
    }

    // Print the Binary Tree along the
    // Right Pointers after Flattening
    public static void printFlattenTree(TreeNode root) {
        if (root == null) {
            return;
        }
        System.out.print(root.val + " ");
        printFlattenTree(root.right);
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.left.right.right = new TreeNode(6);
        root.right.right = new TreeNode(7);
        root.right.left = new TreeNode(8);

        Solution sol = new Solution();

        System.out.print("Binary Tree Preorder: ");
        printPreorder(root);
        System.out.println();

        sol.flatten(root);

        System.out.print("Binary Tree After Flatten: ");
        printFlattenTree(root);
        System.out.println();
    }
}
                                
                            
