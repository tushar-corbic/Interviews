Flatten a multilevel linked list using level order traversal
Given a linked list where in addition to the next pointer, each node has a child pointer, which may or may not point to a separate list. These child lists may have one or more children of their own to produce a multilevel linked list. Given the head of the first level of the list. The task is to flatten the list so that all the nodes appear in a single-level linked list. Flatten the list in a way that all nodes at the first level should come first, then nodes of the second level, and so on.

class Solution {
    // Function to flatten a linked list
    Node flatten(Node root) {
        // code here
        if(root==null || root.next==null)
            return root;
        Node rootnext = flatten(root.next);
        root = merge(root, rootnext);
        return root;
    }
    Node merge(Node list1, Node list2){
        Node dummy = new Node(-1);
        Node cur = dummy;
        while(list1!=null && list2!=null){
            if(list1.data<=list2.data){
                cur.bottom = list1;
                cur = cur.bottom;
                list1 = list1.bottom;
            }else{
                cur.bottom = list2;
                cur = cur.bottom;
                list2 = list2.bottom;
            }
        }
        if(list1!=null)
            cur.bottom = list1;
        if(list2!=null)
            cur.bottom = list2;
        return dummy.bottom;
    }
}
