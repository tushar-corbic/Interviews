 Implement Trie ll 
Ninja has to implement a data structure ”TRIE” from scratch. Ninja has to complete some functions.

1) Trie(): Ninja has to initialize the object of this “TRIE” data structure.

2) insert(“WORD”): Ninja has to insert the string “WORD”  into this “TRIE” data structure.

3) countWordsEqualTo(“WORD”): Ninja has to return how many times this “WORD” is present in this “TRIE”.

4) countWordsStartingWith(“PREFIX”): Ninjas have to return how many words are there in this “TRIE” that have the string “PREFIX” as a prefix.

5) erase(“WORD”): Ninja has to delete one occurrence of the string “WORD” from the “TRIE”.

Note:

1. If erase(“WORD”) function is called then it is guaranteed that the “WORD” is present in the “TRIE”.

2. If you are going to use variables with dynamic memory allocation then you need to release the memory associated with them at the end of your solution.

Can you help Ninja implement the "TRIE" data structure?

import java.util.* ;
import java.io.*; 
class Node{
    Node[] children;
    boolean isEnd;
    int prefixcount;
    int wordcount ;
    public Node(){
        children = new Node[26];
        for(int i =0; i<26; i++)
            children[i] = null;
        isEnd = false;
        prefixcount = 0;
        wordcount = 0;
    }
    public void insertNode(Node node, char ch){
        children[ch-'a'] = node;
    }
    public boolean isNodePresent(char ch){
        return children[ch-'a']!=null;
    }
    public Node getNode(char ch){
        return children[ch-'a'];
    }
    public boolean isEnd(){
        return isEnd;
    }
    public void setEnd(){
        isEnd = true;
    }
    // public voi

}
public class Trie {
    static Node root;
    public Trie() {
        // Write your code here.
        root = new Node();
    }

    public void insert(String word) {
        Node node = root;
        for(int i =0; i<word.length(); i++){
            if(node.isNodePresent(word.charAt(i))==false){
                node.insertNode(new Node(), word.charAt(i));
            }
            node = node.getNode(word.charAt(i));
            node.prefixcount++;
            
        }
        node.setEnd();
        node.wordcount++;
        // Write your code here.
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node node = root;
        for(int i=0; i<word.length(); i++){
            if(node.isNodePresent(word.charAt(i))==false){
                return 0;
            }
            node = node.getNode(word.charAt(i));
        }
        return node.wordcount;
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        Node node = root;
        for(int i =0; i<word.length(); i++){
            if(!node.isNodePresent(word.charAt(i)))
                return 0;
            node = node.getNode(word.charAt(i));
        }
        return node.prefixcount;
    }

    public void erase(String word) {
        // Write your code here.
        Node node = root;
        for(int i =0; i<word.length(); i++){
            if(node.isNodePresent(word.charAt(i))==false)
                return;
            node = node.getNode(word.charAt(i));
            node.prefixcount--;
        }
        if(node.isEnd())
            node.wordcount--;
    }

}
