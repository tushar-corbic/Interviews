Kth smallest element in an unsorted array 
 Problem statement

Given an unsorted array ‘arr’ of distinct integers and an integer ‘k’, your task is to find the ‘k-th’ smallest element in the array.
Example:

n = 5, k = 2 and arr[] = {6, 5, 4, 8, 7}
The array elements in sorted order are [4, 5, 6, 7, 8]. The ‘2-nd’ smallest element in the array is 5, so the answer is 5.

Note:

1. Don’t print anything. Return the value of ‘k-th’ smallest element.
2. ‘k’ is a positive integer and not greater than the size of the array.
3. The array ‘arr’ is unsorted, and all the elements of the array are distinct.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:

1 <= T <= 10
1 <= n <= 1000
1 <= k <= n
-10^6 <= arr[i] <=10^6

Where ‘T’ is the total number of test cases, ‘n’ denotes the array’s size, ‘k’ denotes the ‘k-th’ smallest element that you must return, and ‘arr[i]’ denotes the range of elements in the array.

Time limit: 1 second

Sample input 1:

2
5 3
1 2 3 4 5
5 4
1 3 2 6 5

Sample output 1:

3
5

Explanation of sample input 1:

Test Case 1:
The array elements in sorted order are [1, 2, 3, 4, 5]. The ‘3-rd’ smallest element in the array is 3, so the answer is 3.

Test Case 2:
The array elements in sorted order are [1, 2, 3, 5, 6]. The ‘4-th’ smallest element in the array is 5, so the answer is 5.

Sample input 2:

2
5 1
10 23 45 8 21
6 6
20 10 30 40 60 50

Sample output 2:

8
60

import java.util.ArrayList;

public class Solution {
	public static int kthSmallestElement(ArrayList<Integer> arr, int n, int k) {
		// Write Your Code here
		// k--;
		k = n-k+1;
		k--;
		int[]arrr = arr.stream().mapToInt(i->i).toArray();
		int start =0;
		int end =arrr.length-1;
		while(true){
			int index = helper4(arrr, start,end);
			if(index>k){
				end = index-1;
			}else if(index<k){
				start = index+1;
			}else{
				return arrr[index];
			}
		}
		// return -1;
	}
	static int helper4(int[]arr, int start, int end){
		int pivot = arr[start];
		int l = start+1;
		int r = end;
		while(l<=r){
			if(pivot>arr[l] && pivot<arr[r]){
				int temp =arr[l];
				arr[l] = arr[r];
				arr[r] = temp;
				l++;
				r--;
			}
			if(arr[l]>=pivot){
				l++;
			}
			if(pivot>=arr[r]){
				r--;
			}
			
			
		}
		int temp2 = arr[start];
		arr[start] = arr[r];
		arr[r]=temp2;
		return r;
	}
		static int partition(int[] arr, int left, int right) {
    int pivot = arr[left] ;
    int l = left + 1 ;
    int r = right;
    while (l <= r) {
        if (arr[l] < pivot && arr[r] > pivot) {
            int temp=arr[l];
            arr[l]=arr[r];
            arr[r]=temp;
            l++ ;
            r-- ;
        }
        if (arr[l] >= pivot) {
            l++;
        }
        if (arr[r] <= pivot) {
            r--;
        }
    }
    int temp2=arr[left];
            arr[left]=arr[r];
            arr[r]=temp2;
    return r;
}
}
