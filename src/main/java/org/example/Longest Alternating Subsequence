 Longest Alternating Subsequence
Problem statement
You are given an array ‘ARR’ of integers. Your task is to find the length of the longest alternating subsequence.

Note:
A sequence a1, a2, .... an is called an alternating sequence if its elements satisfy one of the following relations : a1 < a2 > a3 < a4 > a5..... or  a1 > a2 < a3 > a4 < a5.
For example:
'ARR' = {3, 10, 1, 2, 30}, the longest alternating subsequence for this array can be {3, 10, 1, 30} or {3, 10, 2, 30}. Therefore, the answer will be 4.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
2
7
1 2 5 3 10 15 12
4 
1 4 2 3
Sample Output 1 :
5
4
Explanation of Sample Output 1:
In test case 1, Given 'ARR' = {1,2,5,3,10,15,12}, we can see that the longest alternating subsequence for this array can be {1,5,3,15,12} or {2,5,3,15,12}. Therefore, the length will be 5.

In test case 2, Given 'ARR' = {1,4,2,3} we can see that the longest alternating subsequence for this array will be {1,4,2,3}. Therefore, length will be 4.
Sample Input 2 :
2
5
1 2 3 4 5      
3
1 3 2
Sample Output 2 :
2
3
Explanation of Sample Output 2:
In test case 1, Given 'ARR' = {1,2,3,4,5}, we can see that the longest alternating subsequence for this array can be any pair of two elements. Therefore, the length will be 2.

In test case 2, Given 'ARR' = {1,3,2} we can see that the longest alternating subsequence for this array will be {1,3,2}. Therefore, the length will be 3.

// Java program to find longest
// alternating subsequence in an array
import java.io.*;

class GFG {

	// Function to return longest
	// alternating subsequence length
	static int zzis(int arr[], int n)
	{
		/*las[i][0] = Length of the longest
			alternating subsequence ending at
			index i and last element is
			greater than its previous element
		las[i][1] = Length of the longest
			alternating subsequence ending at
			index i and last element is
			smaller than its previous
			element */
		int las[][] = new int[n][2];

		/* Initialize all values from 1 */
		for (int i = 0; i < n; i++)
			las[i][0] = las[i][1] = 1;

		int res = 1; // Initialize result

		/* Compute values in bottom up manner */
		for (int i = 1; i < n; i++) {
			// Consider all elements as
			// previous of arr[i]
			for (int j = 0; j < i; j++) {
				// If arr[i] is greater, then
				// check with las[j][1]
				if (arr[j] < arr[i]
					&& las[i][0] < las[j][1] + 1)
					las[i][0] = las[j][1] + 1;

				// If arr[i] is smaller, then
				// check with las[j][0]
				if (arr[j] > arr[i]
					&& las[i][1] < las[j][0] + 1)
					las[i][1] = las[j][0] + 1;
			}

			/* Pick maximum of both values at
			index i */
			if (res < Math.max(las[i][0], las[i][1]))
				res = Math.max(las[i][0], las[i][1]);
		}

		return res;
	}

	/* Driver code*/
	public static void main(String[] args)
	{
		int arr[] = { 10, 22, 9, 33, 49, 50, 31, 60 };
		int n = arr.length;
		System.out.println("Length of Longest "
						+ "alternating subsequence is "
						+ zzis(arr, n));
	}
}
// This code is contributed by Prerna Saini



// Java Program for above approach
public class GFG {

	// Function for finding
	// longest alternating
	// subsequence
	static int LAS(int[] arr, int n)
	{

		// "inc" and "dec" initialized as 1,
		// as single element is still LAS
		int inc = 1;
		int dec = 1;

		// Iterate from second element
		for (int i = 1; i < n; i++) {

			if (arr[i] > arr[i - 1]) {
				// "inc" changes if "dec"
				// changes
				inc = dec + 1;
			}
			else if (arr[i] < arr[i - 1]) {

				// "dec" changes if "inc"
				// changes
				dec = inc + 1;
			}
		}

		// Return the maximum length
		return Math.max(inc, dec);
	}

	// Driver Code
	public static void main(String[] args)
	{
		int[] arr = { 10, 22, 9, 33, 49, 50, 31, 60 };
		int n = arr.length;

		// Function Call
		System.out.println(LAS(arr, n));
	}
}
