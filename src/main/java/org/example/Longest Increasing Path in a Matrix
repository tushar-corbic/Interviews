Longest Increasing Path in a Matrix
Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1

class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[][]dp = new int[n][m];
        int ans = 1;
        for(int i =0; i<n; i++){
            for(int j =0;j<m; j++){
                int temp = dfs(matrix, i, j, n, m, dp);
                ans = Math.max(ans, temp);
            }
        }
        return ans;
    }
    int dfs(int[][]matrix, int i, int j, int n, int m, int[][]dp){
        if(dp[i][j]!=0)
            return dp[i][j];
        int ans = 1;
        int[]dx = new int[]{1, 0, -1,0};
        int[]dy= new int[]{0, 1, 0, -1};
        for(int k =0; k<4; k++){
            int xx = i+dx[k];
            int yy = j+dy[k];
            if(xx>=0 && xx<n && yy>=0 && yy<m && matrix[xx][yy]>matrix[i][j]){
                int temp = 1 + dfs(matrix, xx, yy, n, m, dp);
                ans = Math.max(ans, temp);
            }
        }
        return dp[i][j] = ans;
    }
}
