Longest Increasing Subsequence
Problem statement
For a given array with N elements, you need to find the length of the longest subsequence from the array such that all the elements of the subsequence are sorted in strictly increasing order.

Strictly Increasing Sequence is when each term in the sequence is larger than the preceding term.

For example:
[1, 2, 3, 4] is a strictly increasing array, while [2, 1, 4, 3] is not.

This is a classic Dynamic Programming problem.
Let dp[i] be the longest increase subsequence of nums[0..i] which has nums[i] as the end element of the subsequence.


import java.util.*;
public class Solution {

	public static int longestIncreasingSubsequence(int arr[]) {
		//Your code goes here
        // List<Integer> ans  = new ArrayList<>();
        // ans.add(arr[0]);
        // for(int i = 1; i<arr.length; i++){
        //     if(arr[i]>ans.get(ans.size()-1)){
        //         ans.add(arr[i]);
        //     }else{
        //         int ind = Collections.binarySearch(ans, arr[i]);
        //         if(ind<0){
        //             ind = -ind-1;
        //         }
        //         ans.set(ind, arr[i]);
        //     }
        // }
        // return ans.size();
        int n = arr.length;
        int []dp = new int[n];
        dp[0] = 1;
        for(int i = 1; i<n; i++){
            int temp = 0;
            for(int j = 0; j<i; j++){
                if(arr[i]>arr[j]){
                    temp = Math.max(temp, dp[j]);
                }
            }
            dp[i] = temp+1;
        }
        int ans = 0;
        for(int  i =0; i<n; i++){
            ans = Math.max(ans, dp[i]);
        }
        return ans;
	}

}



int []dp = new int[height.size()];
		int size= 0;
		for(pp env: list){
			int left = 0;
			int right= size;
			int middle = 0;
			while(left<right){
				middle = left + (right-left)/2;
				if(dp[middle]<env.h){
					left = middle+1;
				}else{
					right = middle;
				}
			}
			dp[left] = env.h;
			if(left==size)
				size++;
		}
		return size;
