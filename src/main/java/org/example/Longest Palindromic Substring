Longest Palindromic Substring

roblem statement
You are given a string 'str' of length 'N'.



Your task is to return the longest palindromic substring. If there are multiple strings, return any.



A substring is a contiguous segment of a string.



For example :
str = "ababc"

The longest palindromic substring of "ababc" is "aba", since "aba" is a palindrome and it is the longest substring of length 3 which is a palindrome. 

There is another palindromic substring of length 3 is "bab". Since starting index of "aba" is less than "bab", so "aba" is the answer.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
abccbc
Sample Output 1:
bccb
Explanation for input 1:
For string "abccbc",  there are several palindromic substrings such as "a", "b", "c", "cc", "bccb", and "cbc". However, the longest palindromic substring is "bccb".
Sample Input 2:
aeiou
Sample Output 2:
a
Constraints :
1 <= |str| <= 10^3

Time Limit: 1 sec



public class Solution {	
	public static String longestPalinSubstring(String str) {
		// Write your code here.
		if(str.length()<2)
			return str;
		int low = 0;
		int high = 0;
		int ans = 1;
		int n = str.length();
		int index = 0;
		for(int i =0; i<str.length(); i++){
			low = i-1;
			high = i+1;
			while(low>=0 && str.charAt(low)==str.charAt(i))
				low--;
			while(high<n && str.charAt(high)==str.charAt(i))
				high++;
			while(low>=0 && high<n && str.charAt(low)==str.charAt(high))
			{
				low--;
				high++;
			}
			if(ans<high-low-1){
				ans = high-low-1;
				index = low+1;
			}
		}
		return str.substring(index, index+ans);
	}
}
