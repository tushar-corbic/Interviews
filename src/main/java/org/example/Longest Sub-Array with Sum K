Longest Sub-Array with Sum K


import java.util.HashMap;

public class Main {
    public static int lenOfLongSubarr(int[] A, int N, int K)
    {
        HashMap<Integer, Integer> sum_index_map
            = new HashMap<>();
        int maxLen = 0;
        int prefix_sum = 0;

        for (int i = 0; i < N; i++) {
            prefix_sum += A[i];

            if (prefix_sum == K) {
                maxLen = i + 1;
            }

            else if (sum_index_map.containsKey(prefix_sum - K)) {
                maxLen = Math.max(
                    maxLen,
                    i - sum_index_map.get(prefix_sum - K));
            }

            if (!sum_index_map.containsKey(prefix_sum)) {
                sum_index_map.put(prefix_sum, i);
            }
        }

        return maxLen;
    }

    public static void main(String[] args)
    {
        int[] arr = { 10, 5, 2, 7, 1, 9 };
        int n = arr.length;
        int k = 15;
        System.out.println("Length = "
                           + lenOfLongSubarr(arr, n, k));
    }
}
