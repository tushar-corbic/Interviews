Longest Substring Without Repeating Characters
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3



class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0)
            return 0;
        Map<Character,Integer>map = new HashMap<>();
        int ans = 0;
        int i = 0;
        int j =0;
        while(j<s.length()){
            if(map.containsKey(s.charAt(j))){
                i = Math.max(i, map.get(s.charAt(j))+1);
            }
            map.put(s.charAt(j), j);
            ans = Math.max(ans, j-i+1);
            j++;
        }
        return ans;
    }
}


import java.util.* ;
import java.io.*; 
public class Solution {
        
	public static int lengthOfLongestSubstring(String str) {
		if(str==null || str.length()==0)
			return 0;
		// Write your code here.
		Map<Character,Integer>map = new HashMap<>();
		int l = 0;
		int r = 0;
		int n = str.length();
		int ans = 1;
		while(r<n){
			char ch = str.charAt(r);
			if(map.containsKey(ch)){
				l = Math.max(map.get(ch)+1, l);
				ans = Math.max(ans, r-l+1);
				map.put(ch, r);
				r++;
			}else{
				map.put(ch,r);
				ans = Math.max(ans, r-l+1);
				r++;
			}
		}
		return ans;
	}
}
