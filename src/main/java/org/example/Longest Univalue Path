 Longest Univalue Path

Problem statement
You are given a binary tree, the task is to find out the length of the longest path which contains nodes with the exact same value. It is not necessary for the path to pass through the root of the binary tree.

Between two nodes, the length of the path can be defined as the number of edges contained between them.

For example, consider the following binary tree:

            7
           / \
          7   7
         / \   \
        8  3    7
For the above tree, the length of the longest path where each node in the path has the same value is 3 and path is 7 -> 7 -> 7 -> 7.

/****************************************

Following is the BinaryTreeNode class structure

class BinaryTreeNode {
	int data;
	BinaryTreeNode left;
	BinaryTreeNode right;

	BinaryTreeNode(int data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

****************************************/

public class Solution {
	public static int longestUnivaluePath(BinaryTreeNode root) {
		// Write your code here
		int[]ans = new int[1];
		if(root==null)
			return 0;
		helper(root, ans);
		return ans[0];
	}
	static int helper(BinaryTreeNode root, int[]ans){
		if(root==null)
			return 0;
		int leftans = helper(root.left, ans);
		int rightans = helper(root.right,ans);

		int lefttemp = 0;
		int rightemp =0;
		if(root.left!=null && root.left.data==root.data)
			lefttemp=leftans+1;
		if(root.right!=null && root.right.data==root.data)
			rightemp=rightans+1;
		ans[0] = Math.max(ans[0], lefttemp+rightemp);
		return Math.max(lefttemp, rightemp);
	}
}
