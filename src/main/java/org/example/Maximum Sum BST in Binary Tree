Maximum Sum BST in Binary Tree
Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


class Solution {
    private int maxSum = 0;
    public int maxSumBST(TreeNode root) {
        postOrderTraverse(root);
        return maxSum;
    }
    private int[] postOrderTraverse(TreeNode root) {
        if (root == null) return new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, 0}; // {min, max, sum}, initialize min=MAX_VALUE, max=MIN_VALUE
        int[] left = postOrderTraverse(root.left);
        int[] right = postOrderTraverse(root.right);
        // The BST is the tree:
        if (!(     left != null             // the left subtree must be BST
                && right != null            // the right subtree must be BST
                && root.val > left[1]       // the root's key must greater than maximum keys of the left subtree
                && root.val < right[0]))    // the root's key must lower than minimum keys of the right subtree
            return null;
        int sum = root.val + left[2] + right[2]; // now it's a BST make `root` as root
        maxSum = Math.max(maxSum, sum);
        int min = Math.min(root.val, left[0]);
        int max = Math.max(root.val, right[1]);
        return new int[]{min, max, sum};
    }
}



public class Solution {
    static int maximumSumBST(BinaryTreeNode<Integer> root) {
        // Write your code here.
        int[]ans = new int[]{0};
        postorderTraversal(root, ans);
        return ans[0];
    }
    static int[] postorderTraversal(BinaryTreeNode<Integer>root, int[]ans){
        if(root==null)
            return new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int []left = postorderTraversal(root.left, ans);
        int []right= postorderTraversal(root.right, ans);

        if(!(left!=null && right!=null && root.data>left[1] && root.data<right[0])){
            return null;
        }

        int sum = root.data + left[2]+ right[2];
        ans[0] = Math.max(ans[0], sum);
        int mini = Math.min(root.data, left[0]);
        int maxi = Math.max(root.data, right[1]);
        return new int[]{mini, maxi, sum};
    }

}
