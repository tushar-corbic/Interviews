Maximum sum of two non-overlapping subarrays of a given size


You are given an array/list ARR of integers and a positive integer ‘K’. Your task is to find two non-overlapping subarrays (contiguous) each of length ‘K’ such that the total sum of these subarrays is maximum.

For Example:
If you are given ARR = [2, 5, 1, 2, 7, 3, 0] and K = 2, the output is 17. 

We can choose non-overlapping subarrays [2, 5] and [7, 3] to get a total sum of 17 (i.e. 2 + 5 + 7 + 3) which is the maximum possible sum.
You can assume that the array will always contain at least two non-overlapping subarrays with size ‘K’. So, the answer will always exist.

public static int maxSumTwoSubarray(int[] arr, int N, int k) {
		// Write your code here.
		int ans = Integer.MIN_VALUE;
		ans = Math.max(ans, helper(arr, k, k));
		return ans;
	}
	static int helper(int[]arr, int x, int y){
		int n = arr.length;
		int[]dp = new int[n];
		int[]dp2 = new int[n];
		int sum =0;
		for(int i = 0; i<n; i++){
			if(i<x){
				sum+= arr[i];
				dp[i] = sum;
			}else{
				sum+= arr[i]-arr[i-x];
				dp[i] = Math.max(dp[i-1], sum);
			}
		}
		sum =0;
		for(int i = n-1; i>=0; i--){
			if(i+y>=n){
				sum+= arr[i];
				dp2[i] = sum;
			}else{
				sum+= arr[i]-arr[i+y];
				dp2[i] = Math.max(dp2[i+1], sum);
			}
		}
		int ans = Integer.MIN_VALUE;
		for(int i = x-1; i+y<n; i++){
			ans = Math.max(dp[i]+ dp2[i+1], ans);
		}
		return ans;
	}
