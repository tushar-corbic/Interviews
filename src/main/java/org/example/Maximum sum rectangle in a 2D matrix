Maximum sum rectangle in a 2D matrix 

You are given an M X N matrix of integers ARR. Your task is to find the maximum sum rectangle.

Maximum sum rectangle is a rectangle with the maximum value for the sum of integers present within its boundary, considering all the rectangles that can be formed from the elements of that matrix.

A rectangle is a 2-D polygon with opposite sides parallel and equal to each other.

For example:
Consider following matrix:

 1  2 -1 -4 -20
-8 -3  4  2   1
 3  8  10 1   3
-4 -1  1  7  -6

The rectangle (1,1) to (3,3) is the rectangle with the maximum sum, i.e. 29.

 1   2 -1 -4  -20
-8 |-3  4  2 |  1
 3 | 8  10 1 |  3
-4 |-1  1  7 | -6
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= M, N <= 100
-10^5 <= ARR[i] <=10^5

Time Limit : 1 sec
Sample Input 1:
3
1 1
1
1 2
-1 1
2 2
1 -1
2 2
Sample Output 1:
1
1
4
Explanation of Input 1:
(i) Maximum sum rectangle is (0,0)-(0,0)
(ii) Maximum sum rectangle is (0,1)-(0,1)
(iii) Maximum sum rectangle is (1,0)-(1,1)
Sample Input 2:
3
1 2
0 0
2 2
1 0 
0 1
4 5
1  2 -1 -4 -20
-8 -3  4  2   1
3  8  10 1   3
-4 -1   1 7  -6
Sample Output 2:
0
2
29
Explanation of Input 2:
(i) Maximum sum rectangle is (0,0)-(0,1)
(ii) Maximum sum rectangle is (0,0)-(1,1)
(iii) Maximum sum rectangle is (1,1)-(3,3)


[Better Approach] Using Prefix Sum to Calculate Sub-matrix Sums
 In this approach, we utilize the prefix sum to efficiently calculate the sum of sub-matrices. Unlike the brute force method, where we compute the sum of elements for each sub-matrix repeatedly, here we precompute the prefix sum matrix.
The prefix sum matrix, pref[i][j], represents the sum of the sub-matrix with the top-left corner at (0, 0) and the bottom-right corner at (i, j). This allows us to quickly derive the sum of any sub-matrix using precomputed values, significantly reducing redundant calculations.

// Java program Maximum sum rectangle in a 2D matrix.

import java.util.*;

class GfG {
 
    static int findSum(int r1, int c1, int r2, int c2,
                      int[][] pref) {
        // Start with the sum of the entire submatrix 
        // (0, 0) to (r2, c2)
        int sum = pref[r2][c2];

          // Subtract the area to the left of the submatrix,
          // if it exists
        if (c1 - 1 >= 0) {
            sum -= pref[r2][c1 - 1];
        }
      
        // Subtract the area to the above the submatrix, 
          // if it exists
        if (r1 - 1 >= 0) {
            sum -= pref[r1 - 1][c2];
        }
 
           // Add back the overlapping area that was 
          // subtracted twice
        if (r1 - 1 >= 0 && c1 - 1 >= 0) {
            sum += pref[r1 - 1][c1 - 1];
        }

        return sum;
    }

    // Function to find the maximum sum rectangle in a 2D
    // matrix
    public static int maxSumRectangle(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        // Initialize the prefix sum matrix
        int[][] pref = new int[n][m];

        // Row-wise sum
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                pref[i][j] = mat[i][j];
                if (j - 1 >= 0) {
                    pref[i][j] += pref[i][j - 1];
                }
            }
        }

        // Column-wise sum
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < n; i++) {
                if (i - 1 >= 0) {
                    pref[i][j] += pref[i - 1][j];
                }
            }
        }

        // Find the maximum sum rectangle
        int maxSum = Integer.MIN_VALUE;

        for (int up = 0; up < n; up++) {
            for (int left = 0; left < m; left++) {
                for (int down = up; down < n; down++) {
                    for (int right = left; right < m;
                                             right++) {
                        // Find the sum of the submatrix
                        // (up, left) to
                        // (down, right)
                        int sum = findSum( up, left, down, 
                                              right, pref);

                        // Update maxSum if sum > maxSum
                        if (sum > maxSum) {
                            maxSum = sum;
                        }
                    }
                }
            }
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[][] mat = { { 1, 2, -1, -4, -20 },
                        { -8, -3, 4, 2, 1 },
                        { 3, 8, 10, 1, 3 },
                        { -4, -1, 1, 7, -6 } };

        int res = maxSumRectangle(mat);
        System.out.println(res);
    }
}



Expected Approach] Using Kadane’s Algorithm
We can optimize the above approach by using Kadane’s Algorithm, which efficiently finds the maximum subarray sum in a 1-D array.
The idea is to fix the left and right boundaries for a sub matrix, and then compute the sum of elements between these boundaries. Instead of recalculating the sum for every sub-matrix, we use an auxiliary array temp[] of size n to store the cumulative sums for each column within the current left and right boundaries. Once we have this 1-D representation of the matrix between the left and right boundaries, we can apply Kadane’s Algorithm to temp[] to find the maximum sum of a subarray, which corresponds to the maximum sum of the sub matrix. 

// Java program Maximum sum rectangle in a 2D matrix.

class GfG {

    // Kadane's algorithm to find the maximum sum subarray
    // in a 1D array
    static int kadaneAlgorithm(int[] temp) {
        int rows = temp.length;
        int currSum = 0;
        int maxSum = Integer.MIN_VALUE;

        for (int i = 0; i < rows; i++) {
            currSum += temp[i];

            // Update maxSum if the current sum is greater
            if (maxSum < currSum) {
                maxSum = currSum;
            }

            // If the current sum becomes negative, reset it
            // to 0
            if (currSum < 0) {
                currSum = 0;
            }
        }

        return maxSum;
    }

    // Function to find the maximum sum rectangle in a 2D
    // matrix
    static int maxSumRectangle(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;

        int maxSum = Integer.MIN_VALUE;

        // Initialize a temporary array to store row-wise
        // sums between left and right boundaries
        int[] temp = new int[rows];

        // Check for all possible left and right boundaries
        for (int left = 0; left < cols; left++) {
          
            // Reset the temporary array for each new left
            // boundary
            for (int i = 0; i < rows; i++) {
                temp[i] = 0;
            }

            for (int right = left; right < cols; right++) {
              
                // Update the temporary array with the
                // current column's values
                for (int row = 0; row < rows; row++) {
                    temp[row] += mat[row][right];
                }

                // Find the maximum sum of the subarray for
                // the current column boundaries
                int sum = kadaneAlgorithm(temp);

                // Update the maximum sum found so far
                maxSum = Math.max(maxSum, sum);
            }
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[][] mat = { { 1, 2, -1, -4, -20 },
                        { -8, -3, 4, 2, 1 },
                        { 3, 8, 10, 1, 3 },
                        { -4, -1, 1, 7, -6 } };

        int res = maxSumRectangle(mat);
        System.out.println(res);
    }
}
