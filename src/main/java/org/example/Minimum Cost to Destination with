Minimum Cost to Destination with 
Problem statement
You have been given an N*M matrix where there are 'N' rows and 'M' columns filled with '0s' and '1s'.



'1' means you can use the cell, and '0' means the cell is blocked. You can move in the 4 following directions from a particular position (i, j):

1. Left - (i, j-1)
2. Right - (i, j+1)
3. Up - (i-1, j)
4. Down - (i+1, j)
Now, for moving in the up and down directions, it costs you $1, and moving to the left and right directions are free of cost.

You have to calculate the minimum cost to reach (X, Y) from (0, 0) where 'X' is the row number and 'Y' is the column number of the destination cell. If it is impossible to reach the destination, print -1.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= N <= 10^3
1 <= M <= 10^3
0 <= matrix[i][j] <= 1
0 <= X < N
0 <= Y < M

where 'N' represents the number of rows, 'M' represents the number of columns, 'matrix[i][j]' represents the elements of the matrix, and 'X' and 'Y' represents the coordinates of the destination point.
Time Limit: 1 sec.
Sample Input 1 :
4 4
1 0 1 0
1 1 0 1
0 0 0 1
1 1 0 1
3 3
Sample Output 1 :
-1
 Explanation to Sample Input 1 :
It is impossible to reach (3, 3) from (0, 0), so Output is -1.
Sample Input 2 :
5 5
1 0 1 0 0
1 0 1 1 1
1 1 1 0 1
0 0 0 0 1
1 1 1 1 1
3 4
Sample Output 2 :
5
 Explanation to Sample Input 2 :
The optimal path to reach (3, 4) from (0,0) is :
(0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4)
So the cost is : 1 + 1 + 0 + 0 + 1 + 0 + 0 + 1 + 1 = 5


#include <iostream>

#include <vector>

#include <queue>

 

using namespace std;

 

typedef pair<int, int>pii;

 

const int INF = 1e9;

const int dx[] = {-1, 1, 0, 0};

const int dy[] = {0, 0, -1, 1};

const int cost[] = {1, 1, 0, 0};
int minCostToDestination(int **matrix, int n, int m, int x, int y)
{
    //  Write your code here
     pii start = {0, 0};

    pii end = {x, y};

 

    vector<vector<int>> dist(n, vector<int>(m, INF));

 

    queue<pii> q;

    q.push(start);

    dist[start.first][start.second] = 0;

 

    while(!q.empty()) {

        pii curr = q.front();

        q.pop();

 

        for(int i = 0; i < 4; i++) {

            int nx = curr.first + dx[i];

            int ny = curr.second + dy[i];

 

            if(nx >= 0 && nx < n && ny >= 0&& ny < m && matrix[nx][ny] && matrix[nx][ny] != 0 && dist[nx][ny] == INF) {

                dist[nx][ny] = dist[curr.first][curr.second] + cost[i];

                q.push({nx, ny});

            }

        }

    }

    return (dist[end.first][end.second] != INF ? dist[end.first][end.second] : -1);    
}
