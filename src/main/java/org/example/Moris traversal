// Java program to print inorder 
// traversal without recursion
// and stack

/* A binary tree tNode has data,
a pointer to left child
and a pointer to right child */
class tNode {
	int data;
	tNode left, right;

	tNode(int item)
	{
		data = item;
		left = right = null;
	}
}

class BinaryTree {
	tNode root;

	/* Function to traverse a 
	binary tree without recursion
	and without stack */
	void MorrisTraversal(tNode root)
	{
		tNode current, pre;

		if (root == null)
			return;

		current = root;
		while (current != null) 
		{
			if (current.left == null) 
			{
				System.out.print(current.data + " ");
				current = current.right;
			}
			else {
				/* Find the inorder 
					predecessor of current
				*/
				pre = current.left;
				while (pre.right != null
					&& pre.right != current)
					pre = pre.right;

				/* Make current as right 
				child of its
				* inorder predecessor */
				if (pre.right == null) {
					pre.right = current;
					current = current.left;
				}

				/* Revert the changes made
				in the 'if' part
				to restore the original 
				tree i.e., fix
				the right child of predecessor*/
				else
				{
					pre.right = null;
					System.out.print(current.data + " ");
					current = current.right;
				} /* End of if condition pre->right == NULL
				*/

			} /* End of if condition current->left == NULL*/

		} /* End of while */
	}

	// Driver Code
	public static void main(String args[])
	{
		/* Constructed binary tree is
			1
			/ \
			2	 3
		/ \
		4	 5
		*/
		BinaryTree tree = new BinaryTree();
		tree.root = new tNode(1);
		tree.root.left = new tNode(2);
		tree.root.right = new tNode(3);
		tree.root.left.left = new tNode(4);
		tree.root.left.right = new tNode(5);

		tree.MorrisTraversal(tree.root);
	}
}

// This code has been contributed by Mayank
// Jaiswal(mayank_24)


/// striver code

                            
import java.util.ArrayList;
import java.util.List;

// TreeNode structure
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode(int x) {
        val = x;
        left = null;
        right = null;
    }
}

public class Solution {
    // Function to perform iterative Morris
    // inorder traversal of a binary tree
    public List<Integer> getInorder(TreeNode root) {
        // List to store the
        // inorder traversal result
        List<Integer> inorder = new ArrayList<>();
        // Pointer to the current node,
        // starting from the root
        TreeNode cur = root;

        // Loop until the current
        // node is not NULL
        while (cur != null) {
            // If the current node's
            // left child is NULL
            if (cur.left == null) {
                // Add the value of the current
                // node to the inorder list
                inorder.add(cur.val);
                // Move to the right child
                cur = cur.right;
            } else {
                // If the left child is not NULL,
                // find the predecessor (rightmost node
                // in the left subtree)
                TreeNode prev = cur.left;
                while (prev.right != null && prev.right != cur) {
                    prev = prev.right;
                }

                // If the predecessor's right child
                // is NULL, establish a temporary link
                // and move to the left child
                if (prev.right == null) {
                    prev.right = cur;
                    cur = cur.left;
                } else {
                    // If the predecessor's right child
                    // is already linked, remove the link,
                    // add current node to inorder list,
                    // and move to the right child
                    prev.right = null;
                    inorder.add(cur.val);
                    cur = cur.right;
                }
            }
        }

        // Return the inorder
        // traversal result
        return inorder;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.left.right.right = new TreeNode(6);

        Solution sol = new Solution();

        List<Integer> inorder = sol.getInorder(root);

        System.out.print("Binary Tree Morris Inorder Traversal: ");
        for (int i = 0; i < inorder.size(); i++) {
            System.out.print(inorder.get(i) + " ");
        }
        System.out.println();
    }
}
                            


