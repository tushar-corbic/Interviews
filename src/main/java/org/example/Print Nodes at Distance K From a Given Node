Print Nodes at Distance K From a Given Node

Problem statement
You are given an arbitrary binary tree, a node of the tree, and an integer 'K'. You need to find all such nodes which have a distance K from the given node and return the list of these nodes.



Distance between two nodes in a binary tree is defined as the number of connections/edges in the path between the two nodes.



//**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
     void getChildToParentLink(TreeNode root, Map<TreeNode,TreeNode> map){
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            TreeNode temp = que.poll();
            if(temp.left!=null){
                map.put(temp.left, temp);
                que.offer(temp.left);

            }
            if(temp.right!=null){
                map.put(temp.right,temp);
                que.offer(temp.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
          Map<TreeNode,TreeNode>map = new HashMap<>();
        getChildToParentLink(root, map);

        Queue<TreeNode>que = new LinkedList<>();
        que.offer(target);
        Map<TreeNode,Integer> vis = new HashMap<>();
        List<Integer> ans= new ArrayList<>();
        vis.put(target,1);
        int count=0;
        while(!que.isEmpty()){
            int sz = que.size();
            for(int i =0;i<sz; i++){
                TreeNode node = que.poll();
                if(count==k){
                    ans.add(node.val);
                }
                if(node.left!=null && vis.get(node.left)==null){
                    que.offer(node.left);
                    vis.put(node.left,1);
                }
                if(node.right!=null && vis.get(node.right)==null){
                    que.offer(node.right);
                    vis.put(node.right,1);
                }
                if(map.get(node)!=null && vis.get(map.get(node))==null){
                    que.offer(map.get(node));
                    vis.put(map.get(node),1);
                }
            }
            count++;
            if(count>k)
                break;
        }
        return ans;
    }
}
