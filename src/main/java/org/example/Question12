There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.

class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        int[] candies = new int[n];
        Arrays.fill(candies, 1);

        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                candies[i] = candies[i - 1] + 1;
            }
        }

        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                candies[i] = Math.max(candies[i], candies[i + 1] + 1);
            }
        }

        int totalCandies = 0;
        for (int candy : candies) {
            totalCandies += candy;
        }

        return totalCandies;
    }
}

class Solution {
    public int candy(int[] arr) {
        int n = arr.length;
        int ans =1;
        int up =0;
        int down  =0;
        int peak = 0;
        for(int i =1; i<n; i++){
            int pre = arr[i-1];
            int cur = arr[i];
            if(pre<cur){
                peak = up+1;
                down = 0;
                up = up+1;
                ans += 1+ up;
            }else if(pre==cur){
                up = 0;
                down =0;
                peak = 0;
                ans+=1;
            }else{
                up = 0;
                down = down+1;
                ans += (1 + down);
                if(peak>=down)
                    ans-=1;
            }
        }
        return ans;
    }
}
