 Regions Cut By Slashes 
This time our favorite Ninja wants to buy a house. But they are unable to count the number of rooms in the house. So they need your help to count the number of rooms.
Note:

A house is represented by a matrix where “\” and “/” represent a wall and blank space is empty space. We will consider two rooms different if we will be unable to reach another room.

Your task is to return the number of rooms. For a better explanation, see the example.
Example:

Input: 
[
  “ /”
  “/\”
]

import java.util.*;
public class Solution {
	public static int countOfRegions(ArrayList<String> house, int n) {
		// Write your code here.
		int[][]dp = new int[n*3][n*3];
		for(int i =0;i<house.size(); i++){
			for(int j =0; j<house.get(i).length(); j++){
				if(house.get(i).charAt(j)=='/'){
					dp[i*3][j*3 +2] = dp[i*3 + 1][j*3 +1] = dp[i*3 + 2][j*3] = 1;
				}
				if(house.get(i).charAt(j)=='\\'){
					dp[i*3][j*3] = dp[i*3 +1][j*3 +1] = dp[i*3 + 2][j*3 +2] = 1;
				}
			}
		}
		int count = 0;
		for(int i =0; i<3*n; i++){
			for(int j = 0; j<3*n; j++){
				if(dp[i][j]==0){
					count++;
					helper(dp, i,j);
				}
			}
		}
		return count;
	}
	static void helper(int[][]dp, int i, int j){
		int n = dp.length;
		int m = dp[0].length;
		if(i>=0 && j>=0 && i<n && j<m && dp[i][j]==0){
			dp[i][j] = 1;
			helper(dp, i+1, j);
			helper(dp, i, j+1);
			helper(dp, i-1, j);
			helper(dp, i,j-1);
		}
	}
	static int dfs(int[][] g, int i, int j) {
    if (Math.min(i, j) < 0 || Math.max(i, j) >= g.length || g[i][j] != 0)
        return 0;
    g[i][j] = 1;
    return 1 + dfs(g, i - 1, j) + dfs(g, i + 1, j) + dfs(g, i, j - 1) + dfs(g, i, j + 1);
} 
}
