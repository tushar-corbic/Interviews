Restore IP Addresses ]

 Problem statement

You are given a string 'S' containing only digits. Your task is to find all possible IP addresses that can be obtained from string 'S' in lexicographical order.
Note:

A valid IP address consists of exactly four integers, each integer is between 0 and 255 separated by single dots, and cannot have leading zeros except in the case of zero itself.

For example:

The following are valid IP addresses:
0.1.24.255
18.5.244.1

Following are invalid IP addresses:
0.01.24.255  (as  01  contains one leading zero).
18.312.244.1 (as 312 not lies between 0 and 255).

Detailed explanation ( Input/output format, Notes, Images )
Constraints:

1 <= T <= 1000
1 <= |S| <= 15

Where |'S'| denotes the length of string 'S' and 'S' contains only digits from 0 to 9.

Time Limit: 1 sec

Note:

You do not need to print anything, it has already been taken care of. Just implement the given function.

Sample Input 1 :

2 
2122
23579

Sample Output 1 :

[“2.1.2.2”]
[“2.3.5.79”, “2.3.57.9”, “2.35.7.9”, “23.5.7.9”]

Explanation for sample Input 1:

For the first test case, there is only one possible IP address that is [2.1.2.2]

For the second test case, all possible IP addresses are shown below.
[2.3.5.79], [2.3.57.9], [2.35.7.9], [23.5.7.9]

Sample Input 2 :

2
123
02300

Sample Output 2 :

[]
[“0.2.30.0”, “0.23.0.0”]

Explanation for sample Input 2:

For the first test case, there is no possible IP address. Therefore then answer is []

For the second test case, there are only 2 possible IP addresses are shown below.
[0.2.30.0], [0.23.0.0]

public List<String> restoreIpAddresses(String s) {
        List<String> list = new LinkedList<>();
        backtrack(s,list,new StringBuilder(),0,0);
        return list;
    }
    private void backtrack(String s, List<String> list, StringBuilder sb, int index, int level){
        if(index > s.length() || level > 4) return;
        else if(index == s.length() && level == 4){
            list.add(sb.toString());
            return;
        }
        for(int i = 1;i <= 3;i++){
            if(index+i > s.length()) break;
            int num = Integer.valueOf(s.substring(index,index+i));
            //Checking if num is 0~9 or 10~99 or 100 ~ 255 because leading 0s is invalid.
            if(i == 1 || i==2 && num >=10 && num <=99 || i == 3 && num >= 100 && num <= 255){
                sb.append(num);
                if(level < 3) sb.append(".");
                backtrack(s,list,sb,index+i,level+1);
                if(level < 3) sb.deleteCharAt(sb.length()-1);
                sb.delete(sb.length()-i,sb.length());
            }
        }
    }
