Reverse List In K Groups

You are given a linked list of 'n' nodes and an integer 'k', where 'k' is less than or equal to 'n'.



Your task is to reverse the order of each group of 'k' consecutive nodes, if 'n' is not divisible by 'k', then the last group of nodes should remain unchanged.



For example, if the linked list is 1->2->3->4->5, and 'k' is 3, we have to reverse the first three elements, and leave the last two elements unchanged. Thus, the final linked list being 3->2->1->4->5.



Implement a function that performs this reversal, and returns the head of the modified linked list.

/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;

     Node()
     {
         this.data = 0;
         this.next = null;
     }

     Node(int data)
     {
         this.data = data;
         this.next = null;
     }

     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 };

 *****************************************************************/

public class Solution {
    static Node reverse(Node head){
        if(head==null || head.next==null)
            return head;
        Node pre= null;
        Node cur = head;
        while(cur!=null){
            Node temp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = temp;
        }
        return pre;
    }

    static Node helper(Node head, int k){
        Node cur = head;
        int count =1;
        if(head==null)
            return head;
        while(cur.next!=null && count<k){
            cur = cur.next;
            count++;
        }
        if(count<k){
            return head;
        }
        Node remaining = cur.next;
        cur.next = null;
        remaining = helper(remaining,k);
        Node pre = reverse(head);
        head.next = remaining;
        return pre;

    }
    public static Node kReverse(Node head, int k) {
        // Write your code here.
        return helper(head,k);
    }
}
