 Row with max 1s
Problem statement
You are given a 2D matrix 'ARR' (containing either ‘0’ or ‘1’) of size 'N' x 'M', where each row is in sorted order.



Find the 0-based index of the first row with the maximum number of 1's.



Note :
If two rows have the same number of 1’s, return the row with a lower index.

If no row exists where at-least one '1' is present, return -1.


import java.util.ArrayList;
public class Solution
{
    public static int maximumOnesRow(ArrayList<ArrayList<Integer>> matrix, int n, int m)
    {
        //	  Write your code here.
        int ans = -1;
        int length = 0;
        for(int i =0; i<n; i++){
            int firstone = helper(matrix.get(i));
            // System.out.println(firstone);
            if(firstone!=-1){
                if(matrix.get(i).size()-1-firstone+1>length){
                    length = matrix.get(i).size()-firstone;
                    ans = i;
                }
            }
        }
        return ans;
    }
    static int helper(ArrayList<Integer>arr){
        int start = 0;
        int end = arr.size()-1;
        int ans = -1;
        while(start<=end){
            int mid  = start + (end-start)/2;
            if(arr.get(mid)==1){
            // System.out.println(arr.get(mid));

                ans = mid;
                end = mid-1;
            }else if(arr.get(mid)==0){
                start =mid+1;
            }
        }
        return ans;
    }
}

Start from the top-right cell(row = 0, col = N – 1) and store the ans = -1. If the value in the current cell is 1, update ans with the current row and move left. Otherwise, if the current cell is 0, move to the next row:


If mat[row][col] == 1, update ans = row and move left by col = col – 1.
Else if mat[row][col] == 0, row = row + 1.
Continue, till we move outside the grid and return ans.
