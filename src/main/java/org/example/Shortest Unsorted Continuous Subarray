Shortest Unsorted Continuous Subarray
Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.

Return the shortest such subarray and output its length.

 

Example 1:

Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Example 2:

Input: nums = [1,2,3,4]
Output: 0
Example 3:

Input: nums = [1]
Output: 0
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105

    if(nums == null) return 0;
    if(nums.Length == 0 || nums.Length == 1) return 0;
    
    int max = Int32.MinValue;
    int end = -2;
    //iterate from beginning of array
    //find the last element which is smaller than the last seen max from 
    //its left side and mark it as end
    for(int i = 0; i < nums.Length; i ++){
        max = Math.Max(max, nums[i]);
        if(nums[i] < max)
            end = i;
    }
    
    int min = Int32.MaxValue;
    int begin = -1;
    //iterate from end of array
    //find the last element which is bigger than the last seen min from 
    //its right side and mark it as begin
    for(int i = nums.Length - 1; i >= 0; i --){
        min = Math.Min(min, nums[i]);
        if(nums[i] > min)
            begin = i;
    }
    
    return end - begin + 1;


import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution {
    public static int subarraySort(ArrayList<Integer> arr) {
        // Write your code here.
        List<Integer> tt = new ArrayList<>(arr);
        Collections.sort(tt);
        int i =0;
        int j =arr.size()-1;;
        while(i<arr.size() && arr.get(i)==tt.get(i))
            i++;
        while(j>i && arr.get(j)==tt.get(j))
            j--;
        return j-i+1;
    }
}
