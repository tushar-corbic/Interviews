Subarrays with K Different Integers

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

    For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]

Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

 

Constraints:

    1 <= nums.length <= 2 * 104
    1 <= nums[i], k <= nums.length



import java.util.*;
public class Solution {
    public static int helper(String str, int k){
        int ans = 0;
        int left = 0;
        int right = 0;
        int n = str.length();
        Map<Character, Integer>map = new HashMap<>();

        while(right<n){
            char ch = str.charAt(right);
            map.put(ch, map.getOrDefault(ch,0)+1);
            while(map.size()>k){
                char chh = str.charAt(left);
                if(map.get(chh)==1){
                    map.remove(chh);
                }else{
                    map.put(chh, map.get(chh)-1);
                }
                left++;
            }
            right++;
            ans+= (right-left+1);
        }
        return ans;
    }
    public static int countSubStrings(String str, int k) {
        // Write your code here.
        return helper(str, k)-helper(str, k-1);
    }
}

