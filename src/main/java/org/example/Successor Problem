Successor Problem
Problem statement
Coding Ninjas has given you an integer 'N'. You have to print the number succeeded by the given number in the lexicographically sorted permutation of all digits of the given number.

If the number is the last element of lexicographically sorted permutation of all digits of the given number, then print -1.

For Example:

The lexicographically sorted list of permutations of all digits of the number ‘123’ is:
123
132
213
231
312
321.

If we are given N as 123 then the permutation which precedes 123 is 132.

Similarly, if N is 132 then the permutation which precedes 132 is 213.

For 321 there does not exist any permutation greater than 321. So we need to print -1.

import java.util.*;
public class Solution {
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> A)
	{
		int n = A.size(); // size of the array.

        // Step 1: Find the break point:
        int ind = -1; // break point
        for (int i = n - 2; i >= 0; i--) {
            if (A.get(i) < A.get(i + 1)) {
                // index i is the break point
                ind = i;
                break;
            }
        }

        // If break point does not exist:
        if (ind == -1) {
            // reverse the whole array:
            Collections.reverse(A);
            return A;
        }

        // Step 2: Find the next greater element
        //         and swap it with arr[ind]:

        for (int i = n - 1; i > ind; i--) {
            if (A.get(i) > A.get(ind)) {
                int tmp = A.get(i);
                A.set(i, A.get(ind));
                A.set(ind, tmp);
                break;
            }
        }

        // Step 3: reverse the right half:
        List<Integer> sublist = A.subList(ind + 1, n);
        Collections.reverse(sublist);

        return A;
	}

	public static long findSuccessor(long n) {
		// Write your code here.
		ArrayList<Integer>ans = new ArrayList<>();
		long temp = n;
		while(n>0){
			ans.add((int)n%10);
			n = n/10;
		}
		Collections.reverse(ans);
		ans = nextPermutation(ans);
		long res = 0;
		for(int i =0 ; i<ans.size(); i++){
			res = res*10 + ans.get(i);
		}
		if(res<temp)
			return -1;
		return res;

	}
}
