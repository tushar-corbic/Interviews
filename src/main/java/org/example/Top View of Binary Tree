Top View of Binary Tree
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        // add your code
        Map<Integer,Integer>map = new TreeMap<>();
        ArrayList<Integer>ans= new ArrayList<>();
        Queue<pp> que = new LinkedList<>();
        que.offer(new pp(root, 0));
        while(!que.isEmpty()){
            pp temp = que.poll();
            if(map.containsKey(temp.edge)==false){
                map.put(temp.edge, temp.node.data);
            }
            if(temp.node.left!=null){
                que.offer(new pp(temp.node.left, temp.edge-1));
            }
            if(temp.node.right!=null){
                que.offer(new pp(temp.node.right,temp.edge+1));
            }
        }
        for(Map.Entry<Integer,Integer> e : map.entrySet()){
            ans.add(e.getValue());
        }
        return ans;
        
    }
}
