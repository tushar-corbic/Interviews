 Travelling Salesman Problem
Given a list of cities numbered from 0 to N-1 and a matrix 'DISTANCE' consisting of 'N' rows and 'N' columns denoting the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the starting city?


import java.util.* ;
import java.io.*; 
public class Solution {
    public static int shortestRoute(int[][] distance) {
        // Write your code here.    
        int n = distance.length;   
        int[][]dp = new int[n][1<<n];
        for(int i =0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }
        return tsp(1, 0, distance.length, distance, dp);
    }

    static int tsp(int mask, int pos, int n, int[][]cost, int[][]dp){
        if(mask==(1<<n)-1){
            return cost[pos][0];
        }
        int ans =  Integer.MAX_VALUE;
        if(dp[pos][mask]!=-1)
            return dp[pos][mask];
        for(int i =0; i<n;i++){
            if((mask & (1<<i)) ==0){
                ans =  Math.min(ans, cost[pos][i] + tsp(mask|(1<<i), i, n, cost, dp));
            }
        }
        dp[pos][mask] = ans;
        return ans;
    }
}

