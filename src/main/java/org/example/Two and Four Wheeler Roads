Two and Four Wheeler Roads
There is a country with 'N' cities and 'M' bidirectional roads of 3 types.

Type 1: Two Wheeler Road, It means only vehicles having two wheels can use this road.
Type 2: Four Wheeler Road, It means only vehicles having four wheels can use this road.
Type 3: Both two and four Wheeler Road, It means this road can be used by both type of vehicles.
The problem is to find the maximum number of roads that can be removed such that a path exists for every pair of cities for each two-wheeler and four-wheeler vehicle.

Note:
1. Roads may form a cycle.

2. The cities do not have multiple same roads i.e all the roads are unique.

3. If every city cannot be reached, then return -1.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 5
1 <= N <= 10^3
1 <= M <= min(100000,(N*(N-1))/2)
1 <= x,y <= N
1 <= z <= 3

Time limit: 1 sec
Sample Input 1:
2
4 6
3 4 2
2 3 3
1 2 3
2 4 1
1 2 1
1 3 1
10 1
1 2 3
Sample Output 1:
2
-1 
Explanation of the Sample Output 1:
In test case 1, If we remove the road between cities 1 and 2 of type 1 and also the road between the cities 1 and 3 of type 1 still we can reach any city from any other city and this holds true for both type of vehicles.

In test case 2, There are 10 cities and there is only one road between cities 1 and 2 of type 3. So we can not reach every city from any other city.
Sample Input 2:
2
2 1
1 2 3
4 6
1 2 1
1 3 2
1 4 3
3 4 1
2 3 1
2 4 2
Sample Output 2:
0
1 
Explanation of the Sample Output 2:
In test case 1, There is only one road two wheeler road and one four wheeler road, and thus no road can be removed.

In test case 2, If we remove the road between city 2 and city 3 of type 1, still we can reach any city from any other city and this holds true for both type of vehicles.

import java.util.* ;
import java.io.*; 
public class Solution {
	 public  static int dfs(int node,int [] visited,ArrayList<Integer>[] a){
        int cnt = 1;
        visited[node] = 1;
		for(int nbr: a[node]){
			if(visited[nbr]==0){
				cnt += dfs(nbr, visited, a);
			}
		}
        return cnt;

    }

	public static int twoFourWheelRoads(int[][] arr, int n, int m) {
		// Write your code here.
		ArrayList<Integer>[] graph1 = new ArrayList[n];
        ArrayList<Integer>[] graph2 = new ArrayList[n];
        ArrayList<Integer>[] graph3 = new ArrayList[n];

        for (int i = 0; i < n; i++) {
            graph1[i] = new ArrayList<Integer>();
            graph2[i] = new ArrayList<Integer>();
            graph3[i] = new ArrayList<Integer>();
        }

        // Iterating for all the 'm' roads and building the connections of link between cities in graph vectors.
        for (int i = 0; i < m; i++){
            int x = arr[i][0];
            int y = arr[i][1];
            int z = arr[i][2];
            x--;
            y--;

            // If it is a Road of type 1, then add links in graph 1.
            if (z == 1){
                graph1[x].add(y);
                graph1[y].add(x);
            }
            // If it is a Road of type 2, then add links in graph 2.
            else if (z == 2){
                graph2[x].add(y);
                graph2[y].add(x);
            }
            // If it is a Road of type 3, then add links in all the three graphs.
            else{
                graph1[x].add(y);
                graph1[y].add(x);

                graph2[x].add(y);
                graph2[y].add(x);

                graph3[x].add(y);
                graph3[y].add(x);
                graph3[x].add(y);
                graph3[y].add(x);
            }
        }

        // Array to store and keep a check on the the visited indices.
        int [] visited=new int[n];

        // Check Connectivity of Graph 1.
        for (int i = 0; i < n; i++){
            visited[i] = 0;
        }
        int cnt = dfs(0, visited, graph1);
        // Return -1 if Nodes in ArrayList 1 is not fully connected.
        if (cnt != n){
            return -1;
        }

        // Check Connectivity of Graph 2.
        for (int i = 0; i < n; i++){
            visited[i] = 0;
        }
        cnt = dfs(0, visited, graph2);
        // Return -1 if Nodes in ArrayList 2 is not fully connected.
        if (cnt != n){
            return -1;
        }

        // Variable to store the count of already used roads during a itarative check on all roads and cities.
        int usedRoads = 0;
        for (int i = 0; i < n; i++){
            visited[i] = 0;
        }

        // Variable to store the count of components.
        int components = 0;

        // Iterating each city to have a count of already used roads between cities.
        for (int i = 0; i < n; i++){
            if (visited[i]!=1){
                cnt = dfs(i, visited, graph3);
                usedRoads += (cnt - 1);
                components++;
            }
        }
        usedRoads += ((components - 1) * 2);

        // Store the maximum number of roads to be removed in the result and return it.
        int result = m - usedRoads;
        return result;
	}
}
