maximum differnce in matrix

Given an n x n matrix mat[n][n] of integers, find the maximum value of mat[c][d] â€“ mat[a][b] over all choices of indexes such that both c > a and d > b.

Example:-

1 2 3 4 
5 6 7 8
1 9 2 3

In this example, the maximum value is 8 (mat[2][1]-mat[0][0]).
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= N <= 10^2
1 <= mat[i][j] <= 10^8

Time Limit - 1 sec
Sample Input 1 :
2
4
9 9 5 1 
4 5 8 0 
7 0 9 7 
5 5 5 6
2
1 2 
1 2
Sample Output 1 :
6
1
Explanation of Sample Output 1 :
In the first test case :

Choose a=3, b=2, c=4, and d=4. So we get 6 
(mat[4][4] - mat[3][2]) as the maximum value. So output will be 6.

 In the second test :

Choose a=1, b=1, c=2, and d=2. So we get 1 
(mat[4][4] - mat[3][2]) as the maximum value. So output will be 1.
Sample Input 2 :

import java.util.* ;
import java.io.*; 
import java.util.Arrays;

public class Solution {
    public static int maxDifference(int[][] arr){
        // Write your code here.
        int n = arr.length;
        int [][]maxarr = new int[n][n];
        int maxv = arr[n-1][n-1];
        maxarr[n-1][n-1] = maxv;
        for(int i =n-2; i>=0; i--){
            // if(arr[i][n-1]>maxv)
            //     maxv = arr[i][n-1];
            // maxarr[i][n-1] = maxv;
            maxarr[i][n-1] = Math.max(maxarr[i+1][n-1], arr[i][n-1]);
        }
        maxv = arr[n-1][n-1];
        for(int i = n-2; i>=0; i--){
            // if(arr[n-1][i]>maxv)
            //     maxv = arr[n-1][i];
            // maxarr[n-1][i] = maxv;
            maxarr[n-1][i] = Math.max(arr[n-1][i], maxarr[n-1][i+1]);
        }
        int ans = Integer.MIN_VALUE;
        for(int i= n-2; i>=0; i--){
            for(int j = n-2; j>=0; j--){
                ans  = Math.max(ans, maxarr[i+1][j+1]-arr[i][j]);
                maxarr[i][j] = Math.max(arr[i][j], Math.max(maxarr[i+1][j], maxarr[i][j+1]));
            }
        }
        if(ans==Integer.MIN_VALUE)
            return 0;
        return ans;
    }
}
